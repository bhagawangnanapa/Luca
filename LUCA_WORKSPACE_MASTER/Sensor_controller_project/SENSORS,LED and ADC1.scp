<?xml version="1.0"?>
<project name="SENSORS with LED and ADC343" version="2.2.0.569">
    <desc><![CDATA[Based on LUCA BLE INTERNAL project. Schematics V4.0]]></desc>
    <pattr name="Apply default power mode">0</pattr>
    <pattr name="Board">None</pattr>
    <pattr name="Chip name">CC2650</pattr>
    <pattr name="Chip package">QFN32 5x5 RHB</pattr>
    <pattr name="Chip revision">-</pattr>
    <pattr name="Clock in active mode">0</pattr>
    <pattr name="Code prefix"></pattr>
    <pattr name="Default power mode">0</pattr>
    <pattr name="Operating system">TI-RTOS</pattr>
    <pattr name="Output directory">C:/Users/smartserver/Desktop/Code composer/sensor controller files</pattr>
    <pattr name="RTC tick interval (16.16 format)">2000</pattr>
    <pattr name="Run-time logging UART RX pin"></pattr>
    <pattr name="Run-time logging UART TX pin"></pattr>
    <task name="SCtask">
        <desc><![CDATA[I2C bus for accelerometer and ALS
SCL-->DIO_10
SDA-->DIO_9
INT1-->DIO_11
INT2-->DIO_12
ALS_INT-->DIO_14
Accelerometer address: 0xD
ALS address: 0x52
Frequency:100Khz]]></desc>
        <tattr name="ACC_I2C_ADDR_R" type="hex" content="const" scope="task" min="0000" max="ffff">0033</tattr>
        <tattr name="ACC_I2C_ADDR_W" type="hex" content="const" scope="task" min="0000" max="ffff">0032</tattr>
        <tattr name="ALS_GAIN_DATA" type="hex" content="const" scope="task" min="0000" max="ffff">0000</tattr>
        <tattr name="ALS_I2C_ADDR_R" type="hex" content="const" scope="task" min="0000" max="ffff">00a5</tattr>
        <tattr name="ALS_I2C_ADDR_W" type="hex" content="const" scope="task" min="0000" max="ffff">00a4</tattr>
        <tattr name="ALS_MEAS_RATE_ADD" type="hex" content="const" scope="task" min="0000" max="ffff">0004</tattr>
        <tattr name="ALS_MEAS_RATE_DATA" type="hex" content="const" scope="task" min="0000" max="ffff">0007</tattr>
        <tattr name="ALS_THRES_LOW_0DATA" type="hex" content="const" scope="task" min="0000" max="ffff">00ff</tattr>
        <tattr name="ALS_THRES_LOW_1DATA" type="hex" content="const" scope="task" min="0000" max="ffff">0000</tattr>
        <tattr name="ALS_THRES_LOW_2DATA" type="hex" content="const" scope="task" min="0000" max="ffff">0000</tattr>
        <tattr name="ALS_THRES_UP_0DATA" type="hex" content="const" scope="task" min="0000" max="ffff">00ff</tattr>
        <tattr name="ALS_THRES_UP_1DATA" type="hex" content="const" scope="task" min="0000" max="ffff">00ff</tattr>
        <tattr name="ALS_THRES_UP_2DATA" type="hex" content="const" scope="task" min="0000" max="ffff">0000</tattr>
        <tattr name="ALS_THRES_VARDATA" type="hex" content="const" scope="task" min="0000" max="ffff">0000</tattr>
        <tattr name="INT_CFG_DATA" type="hex" content="const" scope="task" min="0000" max="ffff">0014</tattr>
        <tattr name="INT_PERSISTANCEDATA" type="hex" content="const" scope="task" min="0000" max="ffff">00f0</tattr>
        <tattr name="MAIN_CTRL_ACTIVE" type="hex" content="const" scope="task" min="0000" max="ffff">0002</tattr>
        <tattr name="MAIN_CTRL_ADDR" type="hex" content="const" scope="task" min="0000" max="ffff">0000</tattr>
        <tattr name="MAIN_CTRL_STANDBY" type="hex" content="const" scope="task" min="0000" max="ffff">0000</tattr>
        <tattr name="cfg.battTHRESHOLD" type="dec" content="struct" scope="task" min="0" max="65535">916</tattr>
        <tattr name="output.ALSDATA0" type="dec" content="struct" scope="task" min="0" max="65535">0</tattr>
        <tattr name="output.ALSDATA1" type="dec" content="struct" scope="task" min="0" max="65535">0</tattr>
        <tattr name="output.ALSDATA2" type="dec" content="struct" scope="task" min="0" max="65535">0</tattr>
        <tattr name="output.CLEARDATA0" type="dec" content="struct" scope="task" min="0" max="65535">0</tattr>
        <tattr name="output.CLEARDATA1" type="dec" content="struct" scope="task" min="0" max="65535">0</tattr>
        <tattr name="output.CLEARDATA2" type="dec" content="struct" scope="task" min="0" max="65535">0</tattr>
        <tattr name="output.MAINSTATUS" type="dec" content="struct" scope="task" min="0" max="65535">0</tattr>
        <tattr name="output.battADC" type="dec" content="struct" scope="task" min="0" max="65535">0</tattr>
        <tattr name="output.battVOL" type="dec" content="struct" scope="task" min="0" max="65535">0</tattr>
        <tattr name="output.valueX" type="dec" content="struct" scope="task" min="0" max="65535">0</tattr>
        <tattr name="output.valueY" type="dec" content="struct" scope="task" min="0" max="65535">0</tattr>
        <tattr name="output.valueZ" type="dec" content="struct" scope="task" min="0" max="65535">0</tattr>
        <tattr name="state.battERROR" desc="0" type="dec" content="struct" scope="task" min="0" max="65535">0</tattr>
        <resource_ref name="ADC" enabled="1"/>
        <resource_ref name="AON Domain Functionality" enabled="0"/>
        <resource_ref name="Accumulator-Based Math" enabled="0"/>
        <resource_ref name="Analog Open-Drain Pins" enabled="0"/>
        <resource_ref name="Analog Open-Source Pins" enabled="0"/>
        <resource_ref name="Analog Pins" enabled="1">
            <io_usage name="BATT_ADC" label="adc of battery">
                <uattr name="Pin count">0</uattr>
                <uattr name="Pin/0000">DIO8</uattr>
                <uattr name="Pin/0001"></uattr>
                <uattr name="Pin/0002"></uattr>
                <uattr name="Pin/0003"></uattr>
                <uattr name="Pin/0004"></uattr>
                <uattr name="Pin/0005"></uattr>
                <uattr name="Pin/0006"></uattr>
                <uattr name="Pin/0007"></uattr>
            </io_usage>
        </resource_ref>
        <resource_ref name="COMPA" enabled="0"/>
        <resource_ref name="COMPA Event Trigger" enabled="0"/>
        <resource_ref name="COMPB" enabled="0"/>
        <resource_ref name="COMPB Event Trigger" enabled="0"/>
        <resource_ref name="Delay Insertion" enabled="1"/>
        <resource_ref name="Differential Output Pins" enabled="0"/>
        <resource_ref name="Digital Input Pins" enabled="1">
            <io_usage name="IRQ" label="ACCEL AND ALS IRQ PIN">
                <uattr name="Configuration on initialization">0</uattr>
                <uattr name="Configuration on uninitialization">-1</uattr>
                <uattr name="Pin count">3</uattr>
                <uattr name="Pin/0000">DIO11</uattr>
                <uattr name="Pin/0001">DIO12</uattr>
                <uattr name="Pin/0002">DIO14</uattr>
                <uattr name="Pin/0003"></uattr>
                <uattr name="Pin/0004"></uattr>
                <uattr name="Pin/0005"></uattr>
                <uattr name="Pin/0006"></uattr>
                <uattr name="Pin/0007"></uattr>
                <uattr name="Pin/0008"></uattr>
                <uattr name="Pin/0009"></uattr>
                <uattr name="Pin/0010"></uattr>
                <uattr name="Pin/0011"></uattr>
                <uattr name="Pin/0012"></uattr>
                <uattr name="Pin/0013"></uattr>
                <uattr name="Pin/0014"></uattr>
                <uattr name="Pin/0015"></uattr>
                <uattr name="Pin/0016"></uattr>
                <uattr name="Pin/0017"></uattr>
                <uattr name="Pin/0018"></uattr>
                <uattr name="Pin/0019"></uattr>
                <uattr name="Pin/0020"></uattr>
                <uattr name="Pin/0021"></uattr>
                <uattr name="Pin/0022"></uattr>
                <uattr name="Pin/0023"></uattr>
                <uattr name="Pin/0024"></uattr>
                <uattr name="Pin/0025"></uattr>
                <uattr name="Pin/0026"></uattr>
                <uattr name="Pin/0027"></uattr>
                <uattr name="Pin/0028"></uattr>
                <uattr name="Pin/0029"></uattr>
                <uattr name="Pin/0030"></uattr>
                <uattr name="Pin/0031"></uattr>
            </io_usage>
        </resource_ref>
        <resource_ref name="Digital Open-Drain Pins" enabled="0"/>
        <resource_ref name="Digital Open-Source Pins" enabled="0"/>
        <resource_ref name="Digital Output Pins" enabled="1">
            <io_usage name="LED" label="blink">
                <uattr name="Configuration on uninitialization">0</uattr>
                <uattr name="Output drive strength">1</uattr>
                <uattr name="Output value on initialization">0</uattr>
                <uattr name="Pin count">0</uattr>
                <uattr name="Pin/0000">DIO2</uattr>
                <uattr name="Pin/0001"></uattr>
                <uattr name="Pin/0002"></uattr>
                <uattr name="Pin/0003"></uattr>
                <uattr name="Pin/0004"></uattr>
                <uattr name="Pin/0005"></uattr>
                <uattr name="Pin/0006"></uattr>
                <uattr name="Pin/0007"></uattr>
                <uattr name="Pin/0008"></uattr>
                <uattr name="Pin/0009"></uattr>
                <uattr name="Pin/0010"></uattr>
                <uattr name="Pin/0011"></uattr>
                <uattr name="Pin/0012"></uattr>
                <uattr name="Pin/0013"></uattr>
                <uattr name="Pin/0014"></uattr>
                <uattr name="Pin/0015"></uattr>
                <uattr name="Pin/0016"></uattr>
                <uattr name="Pin/0017"></uattr>
                <uattr name="Pin/0018"></uattr>
                <uattr name="Pin/0019"></uattr>
                <uattr name="Pin/0020"></uattr>
                <uattr name="Pin/0021"></uattr>
                <uattr name="Pin/0022"></uattr>
                <uattr name="Pin/0023"></uattr>
                <uattr name="Pin/0024"></uattr>
                <uattr name="Pin/0025"></uattr>
                <uattr name="Pin/0026"></uattr>
                <uattr name="Pin/0027"></uattr>
                <uattr name="Pin/0028"></uattr>
                <uattr name="Pin/0029"></uattr>
                <uattr name="Pin/0030"></uattr>
                <uattr name="Pin/0031"></uattr>
            </io_usage>
            <io_usage name="NMOS_DRIVE" label="nmos">
                <uattr name="Configuration on uninitialization">0</uattr>
                <uattr name="Output drive strength">1</uattr>
                <uattr name="Output value on initialization">0</uattr>
                <uattr name="Pin count">0</uattr>
                <uattr name="Pin/0000">DIO13</uattr>
                <uattr name="Pin/0001"></uattr>
                <uattr name="Pin/0002"></uattr>
                <uattr name="Pin/0003"></uattr>
                <uattr name="Pin/0004"></uattr>
                <uattr name="Pin/0005"></uattr>
                <uattr name="Pin/0006"></uattr>
                <uattr name="Pin/0007"></uattr>
                <uattr name="Pin/0008"></uattr>
                <uattr name="Pin/0009"></uattr>
                <uattr name="Pin/0010"></uattr>
                <uattr name="Pin/0011"></uattr>
                <uattr name="Pin/0012"></uattr>
                <uattr name="Pin/0013"></uattr>
                <uattr name="Pin/0014"></uattr>
                <uattr name="Pin/0015"></uattr>
                <uattr name="Pin/0016"></uattr>
                <uattr name="Pin/0017"></uattr>
                <uattr name="Pin/0018"></uattr>
                <uattr name="Pin/0019"></uattr>
                <uattr name="Pin/0020"></uattr>
                <uattr name="Pin/0021"></uattr>
                <uattr name="Pin/0022"></uattr>
                <uattr name="Pin/0023"></uattr>
                <uattr name="Pin/0024"></uattr>
                <uattr name="Pin/0025"></uattr>
                <uattr name="Pin/0026"></uattr>
                <uattr name="Pin/0027"></uattr>
                <uattr name="Pin/0028"></uattr>
                <uattr name="Pin/0029"></uattr>
                <uattr name="Pin/0030"></uattr>
                <uattr name="Pin/0031"></uattr>
            </io_usage>
        </resource_ref>
        <resource_ref name="Dynamic Power Control" enabled="0"/>
        <resource_ref name="GPIO Event Trigger" enabled="0"/>
        <resource_ref name="I2C Master" enabled="1">
            <rattr name="SCL frequency">1</rattr>
            <rattr name="SCL stretch timeout">4</rattr>
            <io_usage>
                <uattr name="SCL pin/0000">DIO10</uattr>
                <uattr name="SDA pin/0000">DIO9</uattr>
            </io_usage>
        </resource_ref>
        <resource_ref name="ISRC" enabled="0"/>
        <resource_ref name="Math and Logic" enabled="0"/>
        <resource_ref name="Multi-Buffered Output Data Exchange" enabled="0">
            <rattr name="Buffer count">2</rattr>
            <rattr name="Indicate overflow at buffer check">1</rattr>
            <rattr name="Indicate overflow at buffer switch">0</rattr>
            <rattr name="Prevent overflow at buffer switch">1</rattr>
        </resource_ref>
        <resource_ref name="Peripheral Sharing" enabled="0"/>
        <resource_ref name="Pulse Counter" enabled="0"/>
        <resource_ref name="RTC Multi-Event Capture" enabled="0"/>
        <resource_ref name="RTC-Based Execution Scheduling" enabled="1"/>
        <resource_ref name="Reference DAC" enabled="0"/>
        <resource_ref name="Run-Time Logging" enabled="0"/>
        <resource_ref name="SPI Chip Select" enabled="0"/>
        <resource_ref name="SPI Data Transfer" enabled="0">
            <rattr name="Bit rate">0</rattr>
            <rattr name="MISO configuration when inactive">-1</rattr>
            <rattr name="MOSI configuration on initialization">0</rattr>
            <rattr name="MOSI configuration on uninitialization">0</rattr>
            <rattr name="SCLK configuration on initialization">0</rattr>
            <rattr name="SCLK configuration on uninitialization">0</rattr>
            <io_usage>
                <uattr name="MISO pin/0000"></uattr>
                <uattr name="MOSI pin/0000"></uattr>
                <uattr name="SCLK pin/0000"></uattr>
            </io_usage>
        </resource_ref>
        <resource_ref name="Signal Observation" enabled="0"/>
        <resource_ref name="System CPU Alert" enabled="1"/>
        <resource_ref name="System Event Trigger" enabled="0"/>
        <resource_ref name="TDC" enabled="0"/>
        <resource_ref name="Timer 0" enabled="0"/>
        <resource_ref name="Timer 0 Event Trigger" enabled="0"/>
        <resource_ref name="Timer 1" enabled="0"/>
        <resource_ref name="Timer 1 Event Trigger" enabled="0"/>
        <resource_ref name="Timer 2" enabled="0"/>
        <resource_ref name="Timer 2 Event Trigger" enabled="0"/>
        <resource_ref name="UART Emulator" enabled="0">
            <rattr name="RX buffer size">64</rattr>
            <rattr name="Required idle period before enabling RX">11</rattr>
            <rattr name="TX buffer size">64</rattr>
            <io_usage>
                <uattr name="RX pin/0000"></uattr>
                <uattr name="TX pin/0000"></uattr>
            </io_usage>
        </resource_ref>
        <sccode name="event0" init_power_mode="0"><![CDATA[]]></sccode>
        <sccode name="event1" init_power_mode="0"><![CDATA[]]></sccode>
        <sccode name="event2" init_power_mode="0"><![CDATA[]]></sccode>
        <sccode name="event3" init_power_mode="0"><![CDATA[]]></sccode>
        <sccode name="execute" init_power_mode="0"><![CDATA[fwDelayInstrCycles(50);
//toggle led
gpioToggleOutput(AUXIO_O_LED);

//read batt ADC
gpioSetOutput(AUXIO_O_NMOS_DRIVE);//On voltage divider
adcEnableSync(ADC_REF_FIXED, ADC_SAMPLE_TIME_2P7_US, ADC_TRIGGER_MANUAL);// Enable the ADC
adcGenManualTrigger();// Sample the analog sensor
adcReadFifo(output.battADC);//read digital value
//output.battVOL = ((output.battADC)*(0.0036674));//1.5/4095
adcDisable();// Disable the ADC
gpioClearOutput(AUXIO_O_NMOS_DRIVE);// Off voltage divider

U16 oldState = state.battERROR;
if (output.battADC > cfg.battTHRESHOLD) {
    state.battERROR = 0; // NormaL BATTERY
}else{
    state.battERROR = 1; // UNDER BATTERY VOLTAGE
}

/////READING FROM ALS//////
i2cStart();//S
i2cTx(ALS_I2C_ADDR_W);//W
i2cTx(0x0D);//SUB ADDRESS
// If successful ...
if (state.i2cStatus == 0x0000) {
    i2cRepeatedStart();
    i2cTx(ALS_I2C_ADDR_R);   //R
    i2cRxAck(output.ALSDATA0);       ///reading from ALS_DATA_0
    i2cRxAck(output.ALSDATA1);       ///reading from ALS_DATA_1
    i2cRxNack(output.ALSDATA2);       ///reading from ALS_DATA_2
    i2cStop();
}else{
    i2cStop();
}

gpioToggleOutput(AUXIO_O_LED);//Toggle Led
//accelerometer reading
U16 F=0;
U16 X=0;
U16 RES_out=0;
U16 Y=0;
U16 Z=0;
U16 Xc=0;
U16 Yc=0;
U16 Zc=0;
//fwDelayInstrCycles(50);
/////Slave reading//////
i2cStart();
i2cTx(ACC_I2C_ADDR_W);
i2cTx(0xA9);
if(state.i2cStatus == 0x0000) {
    i2cRepeatedStart();
    i2cTx(ACC_I2C_ADDR_R);
    i2cRxAck(X);
    i2cRxAck(RES_out);
    i2cRxAck(Y);
    i2cRxAck(RES_out);
    i2cRxAck(Z);
    i2cRxNack(RES_out);
    i2cStop();

//    Xc=X & (1<<7);
//    Yc=Y & (1<<7);
//    Zc=Z & (1<<7);
//    if(Xc == 1){
//        output.valueX=(~(X<<7))+1;
//    }else{
        output.valueX=X;
//    }
//    if(Yc == 1){
//        output.valueY=((~(Y<<7))+1);
//    }else{
        output.valueY=Y;
//    }
//    if(Zc == 1){
//        output.valueZ=((~(Z<<7))+1);
//    }else{
        output.valueZ=Z;
//    }
}else{
    i2cStop();
}
//fwDelayInstrCycles(50);
//gpioToggleOutput(AUXIO_O_LED);//Toggle Led
//gpioClearOutput(AUXIO_O_LED);
fwGenAlertInterrupt();
fwScheduleTask(5);]]></sccode>
        <sccode name="initialize" init_power_mode="0"><![CDATA[gpioSetOutput(AUXIO_O_LED);//Toggle Led
gpioClearOutput(AUXIO_O_NMOS_DRIVE);// Off voltage divider
adcSelectGpioInput(AUXIO_A_BATT_ADC);// Select ADC input

// Initialization of ALS IC
i2cStart();//S
i2cTx(ALS_I2C_ADDR_W);//W
if (state.i2cStatus == 0x0000) {
    i2cTx(MAIN_CTRL_ADDR);
    i2cTx(MAIN_CTRL_ACTIVE);
    //i2cTx(ALS_MEAS_RATE_ADD);       ///address of ALS_MEAS_RATE
    i2cTx(ALS_MEAS_RATE_DATA);    ///data in ALS_MEAN_RATE register
    i2cTx(ALS_GAIN_DATA);       ///data in ALS_GAIN register
    i2cTx(INT_CFG_DATA);        ///data in INT_CFG
    i2cTx(INT_PERSISTANCEDATA);            ///data in INT_PERSISTANCE
    i2cTx(ALS_THRES_UP_0DATA);        ///data in ALS_THRES_UP_0
    i2cTx(ALS_THRES_UP_1DATA);        ///data in ALS_THRES_UP_1
    i2cTx(ALS_THRES_UP_2DATA);        ///data in ALS_THRES_UP_2
    i2cTx(ALS_THRES_LOW_0DATA);        ///data in ALS_THRES_LOW_0
    i2cTx(ALS_THRES_LOW_1DATA);        ///data in ALS_THRES_LOW_1
    i2cTx(ALS_THRES_LOW_2DATA);         ///data in ALS_THRES_LOW_2
    i2cTx(ALS_THRES_VARDATA);           //data in ALS_THRES_VAR
    i2cStop();
}


fwDelayInstrCycles(50);

// Initialization Accelerometer IC
i2cStart();
i2cTx(ACC_I2C_ADDR_W);         /////Slave address with write option
if(state.i2cStatus == 0x0000){
    i2cTx(0x9E);  //((1<<7)|(CTRL_REG0))///control register 0 address with automatic increament register addresses location
    i2cTx(0x10);            ///data in control register 0
    i2cTx(0x00);            ///data in temp disable
    i2cTx(0x2F);             ///data in control register 1
    i2cTx(0x81);             ///data in control register 2(enabling INT1)
    i2cTx(0x10);            ///data in control register 3
    i2cTx(0x90);            ///data in control register 4
    i2cTx(0x80);            ///data in control register 5(boot,fifo)
    i2cTx(0x00);            ///data in control register 6
    i2cTx(0x00);               ///data in reference register
    i2cTx(0x40);              ///data in fifo_ctrl_reg(in BYPASS Mode)
    i2cTx(0x40);            ////int1_cfg1 reg
    i2cTx(0x00);            ////int1_ths reg
    i2cTx(0x00);            ////int1_duration reg
    i2cTx(0x40);            ////int2_cfg2 reg
    i2cTx(0x00);            ////int2_ths reg
    i2cTx(0x00);            ////int2_duration reg
    i2cTx(0x00);            ////clcik config
    i2cTx(0x00);            ////clcik_ths reg
    i2cTx(0x00);            ////time limit reg
    i2cTx(0x00);            ////time latency reg
    i2cTx(0x00);            ////time window reg
    i2cTx(0x00);            ////activity threshold reg
    i2cTx(0x00);            ////activity duration reg
    i2cTx(0x80);            ///data in control register 5
    i2cStop();
}else{
    i2cStop();
}

i2cStart();
i2cTx(ACC_I2C_ADDR_W);         /////Slave address with write option
if(state.i2cStatus == 0x0000){
    i2cTx(0x24);  //((1<<7)|(CTRL_REG0))///control register 0 address with automatic increament register addresses
    i2cTx(0x80);            ///data in control register 5
    i2cStop();
}else{
    i2cStop();
}
fwDelayInstrCycles(10);

fwScheduleTask(1);]]></sccode>
        <sccode name="terminate" init_power_mode="0"><![CDATA[]]></sccode>
        <event_trigger active_count="1">0,1,2,3</event_trigger>
        <tt_iter>run_execute</tt_iter>
        <tt_struct>state.i2cStatus</tt_struct>
        <rtl_struct></rtl_struct>
        <rtl_task_sel en="1" struct_log_list="output"/>
    </task>
</project>
